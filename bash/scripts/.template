#!/bin/bash -u

BASE_DIR=$(cd $(dirname "$0") && pwd -P)
SCRIPT_NAME=$(basename "$0")


# functions
# ==========================================

usage() {
    cat <<EOI
Usage: $SCRIPT_NAME [ARGUMENTS]
(e.g.)

ARGUMENTS:

    -a|--arg FOOVAL       Does something with FOOVAL
    -b|--boolarg          Sets some flag
    -d|--dry-run          Run without making any changes
    -h|--help             This information
    -v|--verbose          Print debugging information to stdout

EXAMPLE:

    \$ $SCRIPT_NAME
EOI
}

# Clean-up logic on script exit (including errors!)
cleanup() {
    true
}

# Fail and quit w/ the error given
fail() {
    echo "${1-$SCRIPT_NAME command failed}" >&2
    exit ${2:-1}
}

# Print a comment
rem() {
    [ "$VERBOSE" -ge 1 ] && echo -e "+ [\033[1;37;40m$@\033[0;0m]" >&2
}

# Command runner that can print a quoted version out first; skips execution w/
# DRYRUN=1
cmd() {
    # no need to repeat our output w/ "set -x"
    [ $DRYRUN -eq 1 -o $VERBOSE -eq 1 ] \
        && echo -e "\033[0;33;40m# $(printf "'%s' " "$@")\033[0;0m" >&2
    if [ $DRYRUN -eq 0 ]; then
        "$@"
    fi
}

# Quick y/n prompt w/ an optional message
prompt_yn() {
    local msg="${1:-continue?}"
    local yes="${2:-y}"
    local no="${3:-n}"
    local resp=''
    while [ "$resp" != "$yes" -a "$resp" != "$no" ]; do
        read -n 1 -p "$msg ($yes|$no) > " resp
        echo >&2
    done
    [ "$resp" = "$yes" ] && return 0 || return 1
}


# collect args
# ==========================================

VERBOSE=0
DRYRUN=0

bool_arg=0
some_arg=

while [ $# -gt 0 ]; do
    case "$1" in
        --dry-run|-d)
            DRYRUN=1
            ;;
        --verbose|-v*)
            [ "${1:0:2}" = '--' ] \
                && VERBOSE=$((VERBOSE + 1)) \
                || VERBOSE=$((VERBOSE + ${#1} - 1))
            ;;
        --help|-h)
            usage
            exit
            ;;
        --arg|-a)
            [ $# -ge 2 ] || fail "Missing arg to --arg|-a"
            some_arg="$2"
            shift
            ;;
        --bool|-b)
            bool_arg=1
            ;;
        *)
            fail "Invalid argument: $1"
            ;;
    esac
    shift
done

[ $VERBOSE -ge 2 ] && set -x


# prep & error checking
# ==========================================
trap cleanup EXIT

[ $DRYRUN -eq 1 ] && echo -e "[\033[4;40;93m DRYRUN \033[0m]" >&2


# script body
# ==========================================

file=".foo bar.$$"
rem "listing a file as an example"
[ -f "$file" ] && fail "'$file' exists already"
touch "$file" || fail "failed to touch '$file'"
cmd ls -la "$file"
rm -f "$file"
