#!/bin/sh -u

BASE_DIR=$(cd $(dirname "$0") && pwd -P)
SCRIPT_NAME=$(basename "$0")

fail() {
	echo "$@"
	exit 1
}

usage() {
        cat <<EOI
usage: $SCRIPT_NAME [COMMAND] [ARGS] TICKET_NUM [BRANCH_INDEX]

Checks out a git branch based on a "\$initials/\$ticket/\$description" branch naming convention. If multiple branches are found, an index number must be provided.

COMMANDS:
  go                    Default -- goes to the branch specied
  purge                 Deletes the local and remote branches if merged to master

ARGS:
  -b, --branch BRANCH   operate on specified branch instead of going by ticket number
  -f, --fetch           run "git fetch" first; else one runs in the background
  -d, --delete          delete local branch first, discarding local commits
  -h, --help            print this information and exit
EOI
        return 1
    }
[ $# -eq 0 ] && {
    usage
    exit 1
}

fetch=0
delete=0
command=
ticket=
branch_index=
branch=  # determined from ticket number, normally

while [ $# -gt 0 ]; do
    arg="$1"
    shift
    case "$arg" in
        --branch|-b)
            [ $# -ge 1 ] || fail "Missing argument to --branch"
            branch="$1"
            shift
            ;;
        --fetch|-f)
            fetch=1
            ;;
        --delete|-d)
            delete=1
            ;;
        --help|-h)
            usage
            exit 0
            ;;
        *)
            if [ "$arg" = '.' ]; then
                branch="master"
                command=go
            elif [ -z "$command" ]; then
                if echo "$arg" | grep -qE '^[0-9]+$'; then
                    command=go
                    ticket=$arg
                else
                    command=$arg
                fi
            elif [ -z "$ticket" ]; then
                ticket="$arg"
            elif [ -z "$branch_index" ]; then
                branch_index="$arg"
                [ $branch_index -ge 1 -a $branch_index -le 100 ] \
                    || fail "Invalid branch index: a value between 1-100 expected"
            else
                fail "Command '$command $ticket' already specified"
            fi
            ;;
    esac
done

# sanity checks!
[ -n "$ticket" -o -n "$branch" ] || {
    usage
    fail "No ticket or branch specified"
}
[ -n "$ticket" -a -n "$branch" ] && {
    usage
    fail "Can't specify both a ticket number and a branch"
}
# we're in a git repo, right?
cur_branch=$(git rev-parse --abbrev-ref HEAD) \
    || fail "No git repo found?"

[ -n "$ticket" ] && {
    # validate the ticket and look up the branch
    ( echo "$ticket" | grep -qe '^[0-9]\+$' ) || {
        usage
        fail "Invalid ticket: $ticket"
    }
    # make sure we find the branch requested -- and only one
    branches=$(git branch -a | grep "remotes/origin/[^/]\+/$ticket/") \
        || fail "Failed to locate a branch for ticket $ticket"
    [ $(echo "$branches" | wc -l) -eq 1 ] || {
        # we better have an index to confirm that we know we want a specific branch
        [ -z "$branch_index" ] && {
            expanded=
            ctr=0
            for branch in $branches; do
                let ctr++
                expanded="$expanded\n  $ctr. $branch"
            done
            fail "Multiple remote branches found; branch index required:\n$expanded"
        }
        # pick out the specific branch
        branches=$(echo "$branches" | sed "${branch_index}q;d")
    }
    # and parse out the branch name
    branch=${branches##*origin/}
} || {
    # make sure this is a valid branch
    remote="remotes/origin/$branch"
    matched=$(git branch -a | awk "\$1 == \"$remote\" {print \$1}")
    [ "$matched" = "$remote" ] || fail "Remote branch not found for branch '$branch'"
}

# make things easy on ourself and pivot to master
# otherwise you can't delete a branch you're in to pull updates easier
# it also helps avoid abandoning local changes
if [ "$cur_branch" != "master" -a "$branch" != "master" ]; then
    git checkout master >/dev/null \
        || fail "Failed to center onto 'master' branch"
fi

if [ "${command:-go}" = "go" ]; then
    # fetch/delete first, as requested
    [ $fetch -eq 1 ] && git fetch origin "$branch"
    [ $delete -eq 1 ] && {
        [ "$branch" = "master" ] && {
            fail "Refusing to delete 'master' branch!"
        } || git branch -D "$branch"
    }
    git checkout "$branch" || fail "Failed to change git branch"
    # if we didn't fetch up front, do a quiet background fetch now
    [ $fetch -eq 0 ] && {
        git fetch origin $branch &>/dev/null </dev/null &
    }
elif [ "$command" = "purge" ]; then
    [ "$branch" = "master" ] && fail "Refusing to purge 'master' branch!"
    # make sure master has this branch merged
    if git branch -a --merged | grep -qE "remotes/origin/$branch$"; then
        read -p "Delete merged branch '$branch'? (y/n) > " confirm
        if [ "$confirm" = "y" ]; then
            # delete the local and remote branches
            git branch -D "$branch"
            git push origin ":$branch"
        else
            echo "Aborting purge of '$branch' at user request"
        fi
    else
        fail "Aborting purge of '$branch'; not merged to master"
    fi
else
    fail "Invalid command: $command"
fi
