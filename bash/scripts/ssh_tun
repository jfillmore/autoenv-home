#!/bin/sh -u

BASE_DIR=$(cd $(dirname "$0") && pwd -P)
SCRIPT_NAME=$(basename "$0")

fail() {
	echo "$@" >&2
	exit 1
}

ssh_args() {
    args="-o StrictHostKeyChecking=no
		-o ConnectTimeout=$SSH_TIMEOUT
		-o TCPKeepAlive=yes
		-o ServerAliveInterval=$SSH_KEEPALIVE
        -A -p $SSH_PORT"
    # the key might already just be cached in the ssh-agent
    [ -n "$SSH_KEY" ] && args="$args -i '$SSH_KEY'"
    echo "$args"
}

test_ssh() {
    local args="$(ssh_args)"
	ssh \
        $args \
		$SSH_USER@$SSH_HOST \
		"$@"
}

test_tun() {
	nc localhost "$1" < /dev/null &>/dev/null
    return $?
}

tunnel() {
    local cmd=ssh
    local args="$(ssh_args)"
    [ $DRYRUN -eq 1 -a $VERBOSE -eq 1 ] && cmd="echo $cmd"
	$cmd \
        $args \
		-N \
		$SSH_USER@$SSH_HOST \
		-L "$1" \
		&
}

debug() {
    [ "$VERBOSE" -eq 1 ] && echo "+ [$@]" >&2
}

usage() {
    cat <<EOI
Usage: $SCRIPT_NAME [OPTIONS] SSH_USER@SSH_HOST TUNNEL [TUNNEL...]
(e.g.)
[you@box ~]$ $SCRIPT_NAME -i ~/.ssh/bob.key -p 222 \\
    bob@somehost.com \\
    8000/example.com/80 \\
    8443/example.com/443

OPTIONS:
    -d|--dry-run          Perform all tests, but do not start any SSH tunnels
    -h|--help             This information
    -i|--ident FILE       SSH private key file
    -k|--keep-alive NUM   SSH keep-alive value (def: $SSH_KEEPALIVE sec)
    -p|--port PORT        SSH port (def: $SSH_PORT)
    -t|--timeout NUM      SSH connect timeout (def: $SSH_TIMEOUT sec)
    -v|--verbose          Print debugging information to stdout

TUNNEL: SSH tunnel specification (e.g. "8000/example.com/80"). Multiple tunnels may be provided.
EOI
}


# collect args
# ==========================================

SSH_PORT=22
SSH_TIMEOUT=5
SSH_KEEPALIVE=90
SSH_USER=''
SSH_HOST=''
SSH_KEY=''
SSH_TUNNELS=''
VERBOSE=0
DRYRUN=0

if [ $# -lt 2 ]; then
    usage
    exit 1;
fi
while [ $# -gt 0 ]; do
    arg="$1"
    shift
    case "$arg" in 
        --keep-alive|-k)
            [ $# -ge 1 ] || fail "Missing argument to '--keep-alive' switch."
            SSH_KEEPALIVE=$1
            shift
            ;;
        --timeout|-t)
            [ $# -ge 1 ] || fail "Missing argument to '--timeout' switch."
            SSH_TIMEOUT=$1
            shift
            ;;
        --ident|-i)
            [ $# -ge 1 ] || fail "Missing argument to '--ident' switch."
            SSH_KEY="$1"
            [ "$SSH_KEY" ] || fail "The SSH key cannot be blank."
            shift
            ;;
        --dry-run|-d)
            DRYRUN=1
            ;;
        --verbose|-v)
            VERBOSE=1
            ;;
        --port|-p)
            [ $# -ge 1 ] || fail "Missing argument to '--port' switch."
            SSH_PORT=$1
            shift
            ;;
        --help|-h)
            usage
            exit
            ;;
        *)
            # first time it's the user/host, after that tunnels
            if [ ! $SSH_USER ]; then
                ssh_str="$arg"
                SSH_USER=${ssh_str%%@*}
                SSH_HOST=${ssh_str##*@}
            else
                # make sure it looks like a tunnel
                [ 3 -eq $(echo "$arg" | awk -F'/' '{print NF}') ] \
                    || fail "Invalid SSH tunnel format: $arg"
                SSH_TUNNELS="$SSH_TUNNELS $arg"
            fi
            ;;
    esac
done


which nc &>/dev/null || fail "Missing 'nc' binary?"

if [ -n "$SSH_KEY" ]; then
    # is the SSH key found?
    [ -f "$SSH_KEY" ] || fail "Unable to locate SSH key file '$SSH_KEY'."
    # add our key to an SSH agent
    eval `~/scripts/auto_agent` &>/dev/null
    ssh-add "$SSH_KEY" 2>/dev/null
fi

if [ $DRYRUN -eq 1 ]; then
    # the remote host is reachable, right?
    debug "Testing SSH ($SSH_USER@$SSH_HOST:$SSH_PORT)"
    whoami=$(test_ssh whoami) \
        || fail "Failed to connect to $SSH_HOST."
    if [ "$whoami" != "$SSH_USER" ]; then
        fail "Got '$whoami' back from SSH test, but $SSH_USER was expected."
    fi
fi

# and now off to the races
errors=0
PIDS=()
for tunnel in $SSH_TUNNELS; do
    local_port=$(echo "$tunnel" | awk -F'/' '{print $1}')
    if test_tun $local_port; then
        fail "Local port $local_port is already open"
        let errors+=1
    else
        remote_host=$(echo "$tunnel" | awk -F'/' '{print $2":"$3}')
        tunnel $tunnel || {
            let errors+=1
            fail "Failed to create SSH tunnel '$tunnel'"
        }
        # we might have got password prompts back... did we REALLY create it?
        tun_pid=$!
        PIDS[${#PIDS[*]}]=$tun_pid
        debug "Tunneling localhost:$local_port => $remote_host (PID: $tun_pid)"
        # wait a moment and verify that it worked... QQ at the delay
        sleep 2
        [ $DRYRUN -eq 0 ] && {
            test_tun $local_port || {
                let errors+=1
                fail "Failed to verify SSH tunnel '$tunnel' -- check for auth errors."
            }
        }
    fi
done

# close the tunnels once the user aborts this script
[ $DRYRUN -eq 0 -a ${#PIDS[@]} -gt 0 ] && {
    trap "echo -n '\n-- Stopping SSH tunnels (PIDs: ${PIDS[*]})--\n'; kill ${PIDS[*]}" SIGINT SIGTERM SIGKILL
    wait ${PIDS[*]}
}
exit $errors
